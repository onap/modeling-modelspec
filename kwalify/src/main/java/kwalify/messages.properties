command.help = \
        Usage1: %s [-hvstlE] -f schema.yaml doc.yaml [doc2.yaml ...]\n\
        Usage2: %s [-hvstlE] -m schema.yaml [schema2.yaml ...]\n\
        \ \ -h, --help      :  help\n\
        \ \ -v              :  version\n\
        \ \ -s              :  silent\n\
        \ \ -f schema.yaml  :  schema definition file\n\
        \ \ -m              :  meta-validation mode\n\
        \ \ -t              :  expand tab character automatically\n\
        \ \ -l              :  show linenumber when errored (experimental)\n\
        \ \ -E              :  show errors in emacs-style (implies '-l')\n
command.option.noaction = command-line option '-f' or '-m' required.
meta.empty = %s: empty.
meta.valid = %s: ok.
meta.invalid = %s: NG!
schema.empty = %s#%d: empty.
validation.empty = %s#%d: empty.
validation.valid = %s#%d: valid.
validation.invalid = %s#%d: INVALID
command.property.invalid = %s: invalid property.
command.option.noarg = -%s: argument required.
command.option.noschema = -%s: schema filename required.
command.option.invalid = -%s: invalid command option.
schema.notmap = schema definition is not a mapping.
key.unknown = unknown key.
type.notstr = not a string.
type.unknown = unknown type.
required.notbool = not a boolean.
pattern.notstr = not a string (or regexp)
pattern.notmatch = should be '/..../'.
pattern.syntaxerr = has regexp error.
enum.notseq = not a sequence.
enum.notscalar = not available with seq or map.
enum.type.unmatch = %s type expected.
enum.duplicate = duplicated enum value.
assert.notstr = not a string.
assert.noval = 'val' is not used.
assert.syntaxerr = expression syntax error.
range.notmap = not a mapping.
range.notscalar = is available only with scalar type.
range.notcollection = not a collection type.
range.type.unmatch = not a %s.
range.undefined = undefined key.
range.twomax = both 'max' and 'max-ex' are not available at once.
range.twomin = both 'min' and 'min-ex' are not available at once.
range.maxltmin = max '%s' is less than min '%s'.
range.maxleminex = max '%s' is less than or equal to min-ex '%s'.
range.maxexlemin = max-ex '%s' is less than or equal to min '%s'.
range.maxexleminex = max-ex '%s' is less than or equal to min-ex '%s'.
length.notmap = not a mapping.
length.nottext = is available only with string or text.
length.notint = not an integer.
length.undefined = undefined key.
length.twomax = both 'max' and 'max-ex' are not available at once.
length.twomin = both 'min' and 'min-ex' are not available at once.
length.maxltmin = max '%s' is less than min '%s'.
length.maxleminex = max '%s' is less than or equal to min-ex '%s'.
length.maxexlemin = max-ex '%s' is less than or equal to min '%s'.
length.maxexleminex = max-ex '%s' is less than or equal to min-ex '%s'.
ident.notbool = not a boolean.
ident.notscalar = is available only with a scalar type.
ident.onroot = is not available on root element.
ident.notmap = is available only with an element of mapping.
unique.notbool = not a boolean.
unique.notscalar = is available only with a scalar type.
unique.onroot = is not available on root element.
sequence.notseq = not a sequence.
sequence.noelem = required one element.
sequence.toomany = required just one element.
mapping.notmap = not a mapping.
mapping.noelem = required at least one element.
seq.nosequence = type 'seq' requires 'sequence:'.
seq.conflict = not available with sequence.
map.nomapping = type 'map' requires 'mapping:'.
map.conflict = not available with mapping.
scalar.conflict = not available with scalar type.
enum.conflict = not available with 'enum:'.
required.novalue = value required but none.
type.unmatch = not a %s.
assert.failed = assertion expression failed (%s).
enum.notexist = invalid %s value.
pattern.unmatch = not matched to pattern %s.
range.toolarge = too large (> max %s).
range.toosmall = too small (< min %s).
range.toolargeex = too large (>= max %s).
range.toosmallex = too small (<= min %s).
length.toolong = too long (length %d > max %d).
length.tooshort = too short (length %d < min %d).
length.toolongex = too long (length %d >= max %d).
length.tooshortex = too short (length %d <= min %d).
value.notunique = is already used at '%s'.
required.nokey = key '%s:' is required.
key.undefined = key '%s' is undefined. Expecting one of %s.
flow.hastail = flow style sequence is closed but got '%s'.
flow.eof = found EOF when parsing flow style.
flow.noseqitem = sequence item required (or last comma is extra).
flow.seqnotclosed = flow style sequence requires ']'.
flow.mapnoitem = mapping item required (or last comma is extra).
flow.mapnotclosed = flow style mapping requires '}'.
flow.nocolon = ':' expected but got '%s'.
anchor.duplicated = anchor '%s' is already used.
alias.extradata = alias cannot take any data.
anchor.notfound = anchor '%s' not found
sequence.noitem = sequence item is expected.
sequence.badindent = illegal indent of sequence.
mapping.noitem = mapping item is expected.
mapping.badindent = illegal indent of mapping.
collection.notcollection = not a collection